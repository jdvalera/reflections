What happens when you initialize a repository? Why do you need to do it?

When you initialize your repository a .git folder is added that will contain meta data for your commits. You have to initiazlize the repository to enable git to keep track of your commits.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the middle ground between the repository and the working directory. It is a temporary placeholder before commits are added into the repository. This is valuable because it lets a user confirm what is going to be committed before committing it to the repository.


How can you use the staging area to make sure you have one commit per logical change?

You can compare it with your working directory or with the last recent commit and make sure you only made one logical change.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches could help keep history organized if there was an alternate version of a program that was acceptable also. For example you can have an English and a Spanish branch for your program. Branches help by letting you update each seperate branch whenever you change something to each version of the program.


How do the diagrams help you visualize the branch structure?

It lets you see the branches visually and makes it easier to trace back to certain nodes.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches together is adding lines/features that were being worked on in another branch into the current checked out branch. It is represented in the diagram that way because it is a combination of two branches so it can backtrack to any of the two branches' commits.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging is good because when there is no ambiguity it makes merging faster than doing it manually. The con for Git's automatic merging is that it cannot merge everything automatically because some parts of the code were edited by multiple people.